#a)
X_T_X <- matrix(c(100,123,96,109,123,252,125,189,96,125,167,146,109,189,146,168), nrow=4,ncol=4)
y_T_y <- c(3924)
X_T_y <- c(460,810,615,712)
n <- X_T_X[1,1]
cov <- matrix(, nrow=3,ncol=3)
for( i in 1:nrow(cov)){
for(j in 1:ncol(cov)){
col_i_mean <- X_T_X[i+1,1]/n
col_j_mean <- X_T_X[j+1,1]/n
#cov[i,j]<- X_T_X[1+i,1+j]-(col_i_mean)*X_T_X[j+1,1]-(col_j_mean)*X_T_X[i+1,1]+n*col_i_mean*col_j_mean
cov[i,j]<-(X_T_X[i+1,j+1]-n*col_i_mean*col_j_mean)/(sqrt(X_T_X[i+1,i+1]-n*col_i_mean*col_i_mean)*sqrt(X_T_X[j+1,j+1]-n*col_j_mean*col_j_mean))
}
}
print(cov)
#b)
## high condition number
ei <- eigen(X_T_X)$values
compute_cond<- function(X){
v <-eigen(X)$values
sqrt(max(v)/min(v))
}
cond <- compute_cond(X_T_X)
print(cond)
##drop_one_var <- which.min(c(compute_cond(X_T_X[-1,-1]),compute_cond(X_T_X[-2,-2]),compute_cond(X_T_X[-3,-3])))
#remove second variable or third one
##corrected_X_T_X <- X_T_X[-drop_one_var,-drop_one_var]
##r_squared
##0.9912091
##0.987962
##0.9952639
#c)
vifs <-c()
betas <- c()
test <- c()
for(i in 1:3){
design_k <- solve(X_T_X[-(i+1),-(i+1)])
##problem here
val_Xt <- c(X_T_X[i+1,1],X_T_X[i+1,2],X_T_X[i+1,3],X_T_X[i+1,4])
val_Xt <- val_Xt[-(i+1)]
beta_k <- design_k %*% val_Xt
betas <- cbind(betas,beta_k)
print(beta_k)
memes <- t(val_Xt)%*%design_k%*%val_Xt
vifs<- append(vifs,1/(1-memes/X_T_X[i+1,i+1]))
##cross <- 2*beta_k[1]*beta_k[2]*design_k[1,2] + 2*beta_k[1]*beta_k[3]*design_k[1,3] + 2*beta_k[2]*beta_k[3]*design_k[2,3]
##square <- design_k[1,1]*(beta_k[1]**2)+design_k[2,2]*(beta_k[2]**2)+design_k[3,3]*(beta_k[3]**2)
##norm_y_hat <- cross + square
##test <- append(test,norm_y_hat/X_T_X[i+1,i+1])
##vifs <- append(vifs, 1/(1-(norm_y_hat/X_T_X[i+1,i+1])))
}
vifs
#a)
X_T_X <- matrix(c(100,123,96,109,123,252,125,189,96,125,167,146,109,189,146,168), nrow=4,ncol=4)
y_T_y <- c(3924)
X_T_y <- c(460,810,615,712)
n <- X_T_X[1,1]
cov <- matrix(, nrow=3,ncol=3)
for( i in 1:nrow(cov)){
for(j in 1:ncol(cov)){
col_i_mean <- X_T_X[i+1,1]/n
col_j_mean <- X_T_X[j+1,1]/n
#cov[i,j]<- X_T_X[1+i,1+j]-(col_i_mean)*X_T_X[j+1,1]-(col_j_mean)*X_T_X[i+1,1]+n*col_i_mean*col_j_mean
cov[i,j]<-(X_T_X[i+1,j+1]-n*col_i_mean*col_j_mean)/(sqrt(X_T_X[i+1,i+1]-n*col_i_mean*col_i_mean)*sqrt(X_T_X[j+1,j+1]-n*col_j_mean*col_j_mean))
}
}
print(cov)
#b)
## high condition number
ei <- eigen(X_T_X)$values
compute_cond<- function(X){
v <-eigen(X)$values
sqrt(max(v)/min(v))
}
cond <- compute_cond(X_T_X)
print(cond)
##drop_one_var <- which.min(c(compute_cond(X_T_X[-1,-1]),compute_cond(X_T_X[-2,-2]),compute_cond(X_T_X[-3,-3])))
#remove second variable or third one
##corrected_X_T_X <- X_T_X[-drop_one_var,-drop_one_var]
##r_squared
##0.9912091
##0.987962
##0.9952639
#c)
vifs <-c()
betas <- c()
test <- c()
for(i in 1:3){
design_k <- solve(X_T_X[-(i+1),-(i+1)])
##problem here
val_Xt <- c(X_T_X[i+1,1],X_T_X[i+1,2],X_T_X[i+1,3],X_T_X[i+1,4])
val_Xt <- val_Xt[-(i+1)]
##beta_k <- design_k %*% val_Xt
##betas <- cbind(betas,beta_k)
##print(beta_k)
memes <- t(val_Xt)%*%design_k%*%val_Xt
vifs<- append(vifs,1/(1-memes/X_T_X[i+1,i+1]))
##cross <- 2*beta_k[1]*beta_k[2]*design_k[1,2] + 2*beta_k[1]*beta_k[3]*design_k[1,3] + 2*beta_k[2]*beta_k[3]*design_k[2,3]
##square <- design_k[1,1]*(beta_k[1]**2)+design_k[2,2]*(beta_k[2]**2)+design_k[3,3]*(beta_k[3]**2)
##norm_y_hat <- cross + square
##test <- append(test,norm_y_hat/X_T_X[i+1,i+1])
##vifs <- append(vifs, 1/(1-(norm_y_hat/X_T_X[i+1,i+1])))
}
vifs
#a)
X_T_X <- matrix(c(100,123,96,109,123,252,125,189,96,125,167,146,109,189,146,168), nrow=4,ncol=4)
y_T_y <- c(3924)
X_T_y <- c(460,810,615,712)
n <- X_T_X[1,1]
cov <- matrix(, nrow=3,ncol=3)
for( i in 1:nrow(cov)){
for(j in 1:ncol(cov)){
col_i_mean <- X_T_X[i+1,1]/n
col_j_mean <- X_T_X[j+1,1]/n
#cov[i,j]<- X_T_X[1+i,1+j]-(col_i_mean)*X_T_X[j+1,1]-(col_j_mean)*X_T_X[i+1,1]+n*col_i_mean*col_j_mean
cov[i,j]<-(X_T_X[i+1,j+1]-n*col_i_mean*col_j_mean)/(sqrt(X_T_X[i+1,i+1]-n*col_i_mean*col_i_mean)*sqrt(X_T_X[j+1,j+1]-n*col_j_mean*col_j_mean))
}
}
print(cov)
#b)
## high condition number
ei <- eigen(X_T_X)$values
compute_cond<- function(X){
v <-eigen(X)$values
sqrt(max(v)/min(v))
}
cond <- compute_cond(X_T_X)
print(cond)
##drop_one_var <- which.min(c(compute_cond(X_T_X[-1,-1]),compute_cond(X_T_X[-2,-2]),compute_cond(X_T_X[-3,-3])))
#remove second variable or third one
##corrected_X_T_X <- X_T_X[-drop_one_var,-drop_one_var]
##r_squared
##0.9912091
##0.987962
##0.9952639
#c)
vifs <-c()
betas <- c()
r_sq <- c()
for(i in 1:3){
design_k <- solve(X_T_X[-(i+1),-(i+1)])
##problem here
val_Xt <- c(X_T_X[i+1,1],X_T_X[i+1,2],X_T_X[i+1,3],X_T_X[i+1,4])
val_Xt <- val_Xt[-(i+1)]
##beta_k <- design_k %*% val_Xt
##betas <- cbind(betas,beta_k)
##print(beta_k)
memes <- t(val_Xt)%*%design_k%*%val_Xt
vifs<- append(vifs,1/(1-memes/X_T_X[i+1,i+1]))
r_sq <- append(r_sq,memes/X_T_X[i+1,i+1])
##cross <- 2*beta_k[1]*beta_k[2]*design_k[1,2] + 2*beta_k[1]*beta_k[3]*design_k[1,3] + 2*beta_k[2]*beta_k[3]*design_k[2,3]
##square <- design_k[1,1]*(beta_k[1]**2)+design_k[2,2]*(beta_k[2]**2)+design_k[3,3]*(beta_k[3]**2)
##norm_y_hat <- cross + square
##test <- append(test,norm_y_hat/X_T_X[i+1,i+1])
##vifs <- append(vifs, 1/(1-(norm_y_hat/X_T_X[i+1,i+1])))
}
##d)
r_sq
#a)
X_T_X <- matrix(c(100,123,96,109,123,252,125,189,96,125,167,146,109,189,146,168), nrow=4,ncol=4)
y_T_y <- c(3924)
X_T_y <- c(460,810,615,712)
n <- X_T_X[1,1]
cov <- matrix(, nrow=3,ncol=3)
for( i in 1:nrow(cov)){
for(j in 1:ncol(cov)){
col_i_mean <- X_T_X[i+1,1]/n
col_j_mean <- X_T_X[j+1,1]/n
#cov[i,j]<- X_T_X[1+i,1+j]-(col_i_mean)*X_T_X[j+1,1]-(col_j_mean)*X_T_X[i+1,1]+n*col_i_mean*col_j_mean
cov[i,j]<-(X_T_X[i+1,j+1]-n*col_i_mean*col_j_mean)/(sqrt(X_T_X[i+1,i+1]-n*col_i_mean*col_i_mean)*sqrt(X_T_X[j+1,j+1]-n*col_j_mean*col_j_mean))
}
}
print(cov)
#b)
## high condition number
ei <- eigen(X_T_X)$values
compute_cond<- function(X){
v <-eigen(X)$values
sqrt(max(v)/min(v))
}
cond <- compute_cond(X_T_X)
print(cond)
##drop_one_var <- which.min(c(compute_cond(X_T_X[-1,-1]),compute_cond(X_T_X[-2,-2]),compute_cond(X_T_X[-3,-3])))
#remove second variable or third one
##corrected_X_T_X <- X_T_X[-drop_one_var,-drop_one_var]
##r_squared
##0.9912091
##0.987962
##0.9952639
#c)
vifs <-c()
betas <- c()
r_sq <- c()
for(i in 1:3){
design_k <- inv(X_T_X[-(i+1),-(i+1)])
##problem here
val_Xt <- c(X_T_X[i+1,1],X_T_X[i+1,2],X_T_X[i+1,3],X_T_X[i+1,4])
val_Xt <- val_Xt[-(i+1)]
##beta_k <- design_k %*% val_Xt
##betas <- cbind(betas,beta_k)
##print(beta_k)
memes <- t(val_Xt)%*%design_k%*%val_Xt
vifs<- append(vifs,1/(1-memes/X_T_X[i+1,i+1]))
r_sq <- append(r_sq,memes/X_T_X[i+1,i+1])
##cross <- 2*beta_k[1]*beta_k[2]*design_k[1,2] + 2*beta_k[1]*beta_k[3]*design_k[1,3] + 2*beta_k[2]*beta_k[3]*design_k[2,3]
##square <- design_k[1,1]*(beta_k[1]**2)+design_k[2,2]*(beta_k[2]**2)+design_k[3,3]*(beta_k[3]**2)
##norm_y_hat <- cross + square
##test <- append(test,norm_y_hat/X_T_X[i+1,i+1])
##vifs <- append(vifs, 1/(1-(norm_y_hat/X_T_X[i+1,i+1])))
}
#a)
X_T_X <- matrix(c(100,123,96,109,123,252,125,189,96,125,167,146,109,189,146,168), nrow=4,ncol=4)
y_T_y <- c(3924)
X_T_y <- c(460,810,615,712)
n <- X_T_X[1,1]
cov <- matrix(, nrow=3,ncol=3)
for( i in 1:nrow(cov)){
for(j in 1:ncol(cov)){
col_i_mean <- X_T_X[i+1,1]/n
col_j_mean <- X_T_X[j+1,1]/n
#cov[i,j]<- X_T_X[1+i,1+j]-(col_i_mean)*X_T_X[j+1,1]-(col_j_mean)*X_T_X[i+1,1]+n*col_i_mean*col_j_mean
cov[i,j]<-(X_T_X[i+1,j+1]-n*col_i_mean*col_j_mean)/(sqrt(X_T_X[i+1,i+1]-n*col_i_mean*col_i_mean)*sqrt(X_T_X[j+1,j+1]-n*col_j_mean*col_j_mean))
}
}
print(cov)
#b)
## high condition number
ei <- eigen(X_T_X)$values
compute_cond<- function(X){
v <-eigen(X)$values
sqrt(max(v)/min(v))
}
cond <- compute_cond(X_T_X)
print(cond)
##drop_one_var <- which.min(c(compute_cond(X_T_X[-1,-1]),compute_cond(X_T_X[-2,-2]),compute_cond(X_T_X[-3,-3])))
#remove second variable or third one
##corrected_X_T_X <- X_T_X[-drop_one_var,-drop_one_var]
##r_squared
##0.9912091
##0.987962
##0.9952639
#c)
vifs <-c()
betas <- c()
r_sq <- c()
for(i in 1:3){
design_k <- solve(X_T_X[-(i+1),-(i+1)])
##problem here
val_Xt <- c(X_T_X[i+1,1],X_T_X[i+1,2],X_T_X[i+1,3],X_T_X[i+1,4])
val_Xt <- val_Xt[-(i+1)]
##beta_k <- design_k %*% val_Xt
##betas <- cbind(betas,beta_k)
##print(beta_k)
memes <- t(val_Xt)%*%design_k%*%val_Xt
vifs<- append(vifs,1/(1-memes/X_T_X[i+1,i+1]))
r_sq <- append(r_sq,memes/X_T_X[i+1,i+1])
##cross <- 2*beta_k[1]*beta_k[2]*design_k[1,2] + 2*beta_k[1]*beta_k[3]*design_k[1,3] + 2*beta_k[2]*beta_k[3]*design_k[2,3]
##square <- design_k[1,1]*(beta_k[1]**2)+design_k[2,2]*(beta_k[2]**2)+design_k[3,3]*(beta_k[3]**2)
##norm_y_hat <- cross + square
##test <- append(test,norm_y_hat/X_T_X[i+1,i+1])
##vifs <- append(vifs, 1/(1-(norm_y_hat/X_T_X[i+1,i+1])))
}
r_sq
t(c(1,2,3,4))
t(c(1,2,3,4))%*%c(1,2,3,4)
t(c(1,2,3,4))%*%c(1,2,3,4)
X_T_X
#a)
X_T_X <- matrix(c(100,123,96,109,123,252,125,189,96,125,167,146,109,189,146,168), nrow=4,ncol=4)
y_T_y <- c(3924)
X_T_y <- c(460,810,615,712)
n <- X_T_X[1,1]
cov <- matrix(, nrow=3,ncol=3)
for( i in 1:nrow(cov)){
for(j in 1:ncol(cov)){
col_i_mean <- X_T_X[i+1,1]/n
col_j_mean <- X_T_X[j+1,1]/n
#cov[i,j]<- X_T_X[1+i,1+j]-(col_i_mean)*X_T_X[j+1,1]-(col_j_mean)*X_T_X[i+1,1]+n*col_i_mean*col_j_mean
cov[i,j]<-(X_T_X[i+1,j+1]-n*col_i_mean*col_j_mean)/(sqrt(X_T_X[i+1,i+1]-n*col_i_mean*col_i_mean)*sqrt(X_T_X[j+1,j+1]-n*col_j_mean*col_j_mean))
}
}
print(cov)
#b)
## high condition number
ei <- eigen(X_T_X)$values
compute_cond<- function(X){
v <-eigen(X)$values
sqrt(max(v)/min(v))
}
cond <- compute_cond(X_T_X)
print(cond)
##drop_one_var <- which.min(c(compute_cond(X_T_X[-1,-1]),compute_cond(X_T_X[-2,-2]),compute_cond(X_T_X[-3,-3])))
#remove second variable or third one
##corrected_X_T_X <- X_T_X[-drop_one_var,-drop_one_var]
##r_squared
##0.9912091
##0.987962
##0.9952639
#c)
vifs <-c()
betas <- c()
r_sq <- c()
for(i in 1:3){
design_k <- solve(X_T_X[-(i+1),-(i+1)])
##problem here
val_Xt <- c(X_T_X[i+1,1],X_T_X[i+1,2],X_T_X[i+1,3],X_T_X[i+1,4])
val_Xt <- val_Xt[-(i+1)]
##beta_k <- design_k %*% val_Xt
##betas <- cbind(betas,beta_k)
##print(beta_k)
memes <- t(val_Xt)%*%design_k%*%val_Xt
vifs<- append(vifs,1/(1-memes/X_T_X[i+1,i+1]))
r_sq <- append(r_sq,memes/X_T_X[i+1,i+1])
##cross <- 2*beta_k[1]*beta_k[2]*design_k[1,2] + 2*beta_k[1]*beta_k[3]*design_k[1,3] + 2*beta_k[2]*beta_k[3]*design_k[2,3]
##square <- design_k[1,1]*(beta_k[1]**2)+design_k[2,2]*(beta_k[2]**2)+design_k[3,3]*(beta_k[3]**2)
##norm_y_hat <- cross + square
##test <- append(test,norm_y_hat/X_T_X[i+1,i+1])
##vifs <- append(vifs, 1/(1-(norm_y_hat/X_T_X[i+1,i+1])))
}
##d)
vifs
# We take from our environment the estimates that are useful for us
Beta <-Beta_hat[2]
# Importation of Data
df <- read.csv('/Users/lionelbrodard/switchdrive/EPFL/03 Courses/Econometrics/02 Problem Sets/Problem Set 05/Electricity_Generation_Cost.csv')
# Computation of Estimating Equation Variables
df$logCOST_PF<-log(df$COST/df$PF) # log(Total cost/Fuel price)
df$logq <- (log(df$Q)) # log(Total Output)
df$logq2 <- 0.5*(log(df$Q)^2) #1/2* log(Total Output)^0.5
df$logPK_PF<-log(df$PK/df$PF)  #log(Capital price index/Fuel price)
df$logPL_PF<-log(df$PL/df$PF) #log(Wage rate/Fuel price)
# Number of Observation by variable
n<-length(df$logPK_PF)
#### Estimation of parameters, their covariance matrix and their standard errors.
# Matrix of X and Y
X <- cbind(replicate(n,1),df$logq,df$logq2,df$logPK_PF,df$logPL_PF) #We create a matrix with the variable of interest
Y <- cbind(df$logCOST_PF)
# Estimated parameters
Beta_hat <- solve(t(X)%*%X)%*%t(X)%*%Y #parameters estimated with our own procedure
reg <- lm(Y~X[,2:5])
Beta_hat_ofs <- cbind(summary(reg)$coef[,1]) #parameters estimated using an off-the-shelve package
# Residuals
e <- Y-X%*%Beta_hat # computation of residuals
ee <- (t(e)%*%e) # sum of squared residuals
# Number of regressors
k<-nrow(Beta_hat)
# Estimated asymsoptical covariances
covB <-ee[1]/(n-k)*solve(t(X)%*%X) # estimated asymptotical covariance matrix using our own procedure
covB_ofs <- vcov(reg) # estimated asymptotical covariance matrix using an off-the-shelve package
# Estimated standard errors of the parameter estimates
sdB <- cbind(sqrt(diag(covB))) # estimated standard errors using our own procedure
sdB_ofs <- cbind(summary(reg)$coef[,2]) # estimated standard errors using an off-the-shelve package
message('Estimated Coefficient - Own Procedure=')
round(Beta_hat,3)
message('Estimated Coefficient - Off-the-Shelve Package=')
round(Beta_hat_ofs,3)
message('Estimated Covariance Matrix - Own Procedure=')
round(covB,5)
message('Estimated Covariance Matrix - Off-the-Shelve Package=')
round(covB_ofs,5)
message('Estimated Standard Errors - Own Procedure=')
round(sdB,3)
message('Estimated Standard Errors - Off-the-Shelve Package=')
round(sdB_ofs,3)
# We take from our environment the estimates that are useful for us
Beta <-Beta_hat[2]
Gamma <- Beta_hat[3]
Var_Beta <- covB[2,2]
Sd_Beta <- sqrt(Var_Beta)
Var_Gamma <- covB[3,3]
Sd_Gamma <- sqrt(Var_Gamma)
# Compute the estimation of Q*
Q_star <- exp((1-Beta)/Gamma)
message('Estimated Q*=')
Q_star
########################################################
#### Simulation of Q using our estimated parameters ####
########################################################
# simulated n
n <-1000
# simulation of 1000 parameters using the estimated mean and sd (be careful of the degree of freedom)
set.seed(10)
Beta_estimation <- rnorm(n,Beta,Sd_Beta/((1/(5-2))*(sqrt(158-2))))
set.seed(10)
Gamma_estimation <- rnorm(n,Gamma,Sd_Gamma/((1/(5-2))*(sqrt(158-2))))
# Simulation of Q
Q_estimation <- matrix(1, nrow = n, ncol = n)
for (i in 1:n){
for (j in 1:n){
Q_estimation[i,j] <- exp((1-Beta_estimation[i])/Gamma_estimation[j])
}
}
# Make Q a vector
Q <- as.vector(Q_estimation)
# Find the estimated standard error
message('Standard Error of Q=')
sqrt(var(Q))
# Make a 95% Confidence interval
message('Lower bound =')
Q_star-1.96*sqrt(var(Q))
message('Upper bound=')
Q_star+1.96*sqrt(var(Q))
